{-# OPTIONS --without-K #-}

--------------------------------------------------------------------------------
-- A simple reflection based solver for categories.
--
-- Based off 'Tactic.MonoidSolver' from 'agda-stdlib'
--------------------------------------------------------------------------------

open import Categories.Category

module Categories.Tactic.Products where

open import Level
open import Function using (_‚ü®_‚ü©_)

open import Data.Bool    as Bool    using (Bool; _‚à®_; if_then_else_)
open import Data.Maybe   as Maybe   using (Maybe; just; nothing; maybe)
open import Data.List    as List    using (List; _‚à∑_; [])

open import Categories.Category.BinaryProducts using (BinaryProducts)
open import Categories.Category.Cartesian
open import Categories.Category.Cartesian.Monoidal
open import Categories.Category.Instance.One renaming (One to ‚ä§)
open import Categories.Category.Monoidal.Instance.Cats
open import Categories.Category.Instance.Cats
open import Categories.Category.Monoidal
import Categories.Morphism

open import Agda.Builtin.Reflection
open import Reflection.Argument
open import Reflection.Term using (getName; _‚ãØ‚üÖ‚à∑‚üÜ_)
open import Reflection.TypeChecking.Monad.Syntax

module _ {o ‚Ñì e} where

  private
    variable
      A B C D : Category o ‚Ñì e

  open Monoidal (Product.Cats-Monoidal {o} {‚Ñì} {e})
  open BinaryProducts (Product.Cats-has-all {o} {‚Ñì} {e})
  open import Categories.Morphism (Cats o ‚Ñì e)
  open import Relation.Binary.Reasoning.Setoid ‚âÖ-setoid


  postulate
    √ó-cong : A ‚âÖ B ‚Üí C ‚âÖ D ‚Üí A √ó C ‚âÖ B √ó D --(X √ó Y) √ó Z
  --√ó-cong = Associative product product product product

  postulate
    ‚ä§-op : Category.op ‚ä§ ‚âÖ ‚ä§

  --------------------------------------------------------------------------------
  -- An 'Expr' reifies the parentheses/identity morphisms of some series of
  -- compositions of morphisms into a data structure. In fact, this is also
  -- a category!
  --------------------------------------------------------------------------------
  data Expr : Set (suc (o ‚äî ‚Ñì ‚äî e)) where
    _√ó‚Ä≤_ : Expr ‚Üí Expr ‚Üí Expr
    1‚Ä≤   : Expr
    op‚Ä≤_ : Expr ‚Üí Expr
    [_‚Üë] : Category o ‚Ñì e ‚Üí Expr

  -- Embed a morphism in 'Expr' back into 'ùíû' without normalizing.
  [_‚Üì] : Expr ‚Üí Category o ‚Ñì e
  [ c √ó‚Ä≤ d ‚Üì] = [ c ‚Üì] √ó [ d ‚Üì]
  [ 1‚Ä≤     ‚Üì] = ‚ä§
  [ [ c ‚Üë] ‚Üì] = c
  [ op‚Ä≤ c  ‚Üì] = Category.op [ c ‚Üì]

  -- Convert an 'Expr' back into a morphism, while normalizing
  --
  -- This actually embeds the morphism into the category of copresheaves
  -- on ùíû, which obeys the category laws up to beta-eta equality.
  -- This lets us normalize away all the associations/identity morphisms.
  mutual
    embed : Expr ‚Üí Category o ‚Ñì e ‚Üí Category o ‚Ñì e
    embed (c √ó‚Ä≤ d) e = embed c (embed d e)
    embed 1‚Ä≤ c = c
    embed [ c ‚Üë] d = c √ó d
    embed (op‚Ä≤ c) d = embed·µí·µñ c d

    embed·µí·µñ : Expr ‚Üí Category o ‚Ñì e ‚Üí Category o ‚Ñì e
    embed·µí·µñ (c √ó‚Ä≤ d) e = embed·µí·µñ c (embed·µí·µñ d e)
    embed·µí·µñ 1‚Ä≤ c = c
    embed·µí·µñ [ c ‚Üë] d = Category.op c √ó d
    embed·µí·µñ (op‚Ä≤ c) d = embed c d

  mutual
    preserves-‚âà‚Ä≤ : ‚àÄ (t : Expr) ‚Üí (c : Category o ‚Ñì e) ‚Üí embed t ‚ä§ √ó c ‚âÖ embed t c
    preserves-‚âà‚Ä≤ (c √ó‚Ä≤ c') d = begin
      embed (c √ó‚Ä≤ c') ‚ä§ √ó d        ‚â°‚ü®‚ü©
      embed c (embed c' ‚ä§) √ó d     ‚âà‚ü® √ó-cong (‚âÖ.sym (preserves-‚âà‚Ä≤ c (embed c' ‚ä§))) ‚âÖ.refl ‚ü©
      (embed c ‚ä§ √ó embed c' ‚ä§) √ó d ‚âà‚ü® ‚âÖ.sym √ó-assoc ‚ü©
      embed c ‚ä§ √ó (embed c' ‚ä§ √ó d) ‚âà‚ü® √ó-cong ‚âÖ.refl (preserves-‚âà‚Ä≤ c' d) ‚ü©
      embed c ‚ä§ √ó (embed c' d)     ‚âà‚ü® preserves-‚âà‚Ä≤ c _ ‚ü©
      embed c (embed c' d)         ‚àé
    preserves-‚âà‚Ä≤ 1‚Ä≤ d     = unitorÀ°
    preserves-‚âà‚Ä≤ [ c ‚Üë] d = √ó-cong unitor ≥ ‚âÖ.refl
    preserves-‚âà‚Ä≤ (op‚Ä≤ c)  = preserves·µí·µñ-‚âà‚Ä≤ c

    preserves·µí·µñ-‚âà‚Ä≤ : ‚àÄ (t : Expr) ‚Üí (c : Category o ‚Ñì e) ‚Üí embed·µí·µñ t ‚ä§ √ó c ‚âÖ embed·µí·µñ t c
    preserves·µí·µñ-‚âà‚Ä≤ (c √ó‚Ä≤ c') d = begin
      embed·µí·µñ (c √ó‚Ä≤ c') ‚ä§ √ó d          ‚â°‚ü®‚ü©
      embed·µí·µñ c (embed·µí·µñ c' ‚ä§) √ó d     ‚âà‚ü® √ó-cong (‚âÖ.sym (preserves·µí·µñ-‚âà‚Ä≤ c (embed·µí·µñ c' ‚ä§))) ‚âÖ.refl ‚ü©
      (embed·µí·µñ c ‚ä§ √ó embed·µí·µñ c' ‚ä§) √ó d ‚âà‚ü® ‚âÖ.sym √ó-assoc ‚ü©
      embed·µí·µñ c ‚ä§ √ó (embed·µí·µñ c' ‚ä§ √ó d) ‚âà‚ü® √ó-cong ‚âÖ.refl (preserves·µí·µñ-‚âà‚Ä≤ c' d) ‚ü©
      embed·µí·µñ c ‚ä§ √ó (embed·µí·µñ c' d)     ‚âà‚ü® preserves·µí·µñ-‚âà‚Ä≤ c _ ‚ü©
      embed·µí·µñ c (embed·µí·µñ c' d)         ‚àé
    preserves·µí·µñ-‚âà‚Ä≤ 1‚Ä≤ d       = unitorÀ°
    preserves·µí·µñ-‚âà‚Ä≤ [ c ‚Üë] d   = √ó-cong unitor ≥ ‚âÖ.refl
    preserves·µí·µñ-‚âà‚Ä≤ (op‚Ä≤ c)    = preserves-‚âà‚Ä≤ c

  mutual
    correct : ‚àÄ (t : Expr) ‚Üí embed t ‚ä§ ‚âÖ [ t ‚Üì]
    correct 1‚Ä≤ = ‚âÖ.refl
    correct (op‚Ä≤ t) = preserves·µí·µñ-‚âà t
    correct [ x ‚Üë] = unitor ≥
    correct (d‚ÇÅ √ó‚Ä≤ d‚ÇÇ) = begin
      embed (d‚ÇÅ √ó‚Ä≤ d‚ÇÇ) ‚ä§      ‚â°‚ü®‚ü©
      embed d‚ÇÅ (embed d‚ÇÇ ‚ä§)   ‚âà‚ü® ‚âÖ.sym (preserves-‚âà‚Ä≤ d‚ÇÅ (embed d‚ÇÇ ‚ä§)) ‚ü©
      embed d‚ÇÅ ‚ä§ √ó embed d‚ÇÇ ‚ä§ ‚âà‚ü® √ó-cong (correct d‚ÇÅ) (correct d‚ÇÇ) ‚ü©
      [ d‚ÇÅ ‚Üì] √ó [ d‚ÇÇ ‚Üì]       ‚â°‚ü®‚ü©
      [ d‚ÇÅ √ó‚Ä≤ d‚ÇÇ ‚Üì]           ‚àé

    preserves·µí·µñ-‚âà : ‚àÄ (t : Expr) ‚Üí embed·µí·µñ t ‚ä§ ‚âÖ Category.op [ t ‚Üì]
    preserves·µí·µñ-‚âà 1‚Ä≤ = ‚âÖ.refl
    preserves·µí·µñ-‚âà (op‚Ä≤ t) = correct t
    preserves·µí·µñ-‚âà [ x ‚Üë] = ‚âÖ.trans (√ó-cong ‚âÖ.refl ‚ä§-op) unitor ≥
    preserves·µí·µñ-‚âà (d‚ÇÅ √ó‚Ä≤ d‚ÇÇ) = begin
      embed·µí·µñ (d‚ÇÅ √ó‚Ä≤ d‚ÇÇ) ‚ä§        ‚â°‚ü®‚ü©
      embed·µí·µñ d‚ÇÅ (embed·µí·µñ d‚ÇÇ ‚ä§)   ‚âà‚ü® ‚âÖ.sym (preserves·µí·µñ-‚âà‚Ä≤ d‚ÇÅ (embed·µí·µñ d‚ÇÇ ‚ä§)) ‚ü©
      embed·µí·µñ d‚ÇÅ ‚ä§ √ó embed·µí·µñ d‚ÇÇ ‚ä§ ‚âà‚ü® √ó-cong (preserves·µí·µñ-‚âà d‚ÇÅ) (preserves·µí·µñ-‚âà d‚ÇÇ)  ‚ü©
      Category.op [ d‚ÇÅ ‚Üì] √ó Category.op [ d‚ÇÇ ‚Üì] ‚â°‚ü®‚ü©
      Category.op [ d‚ÇÅ √ó‚Ä≤ d‚ÇÇ ‚Üì]                 ‚àé

--------------------------------------------------------------------------------
-- Reflection Helpers
--------------------------------------------------------------------------------

module _ {o ‚Ñì e} where

  open import Data.Product renaming (_√ó_ to _√ó'_)

  open BinaryProducts (Product.Cats-has-all {o} {‚Ñì} {e})
  open import Categories.Morphism (Cats o ‚Ñì e)
  open import Relation.Binary.Reasoning.Setoid ‚âÖ-setoid

  --------------------------------------------------------------------------------
  -- Reflection Helpers
  --------------------------------------------------------------------------------

  _==_ = primQNameEquality
  {-# INLINE _==_ #-}

  getArgs : Term ‚Üí Maybe (Term √ó' Term)
  getArgs (def _ xs) = go xs
    where
    go : List (Arg Term) ‚Üí Maybe (Term √ó' Term)
    go (vArg x ‚à∑ vArg y ‚à∑ []) = just (x , y)
    go (x ‚à∑ xs) = go xs
    go _ = nothing
  getArgs _ = nothing

  --------------------------------------------------------------------------------
  -- Constructing an Expr
  --------------------------------------------------------------------------------

  ‚Ä≥1‚Ä≥ : Term
  ‚Ä≥1‚Ä≥ = quote 1‚Ä≤ ‚ü® con ‚ü© []

  ‚Ä≥[_‚Üë]‚Ä≥ : Term ‚Üí Term
  ‚Ä≥[ t ‚Üë]‚Ä≥ = quote [_‚Üë] ‚ü® con ‚ü© (t ‚ü®‚à∑‚ü© [])

  ‚Ä≥op_‚Ä≥ : Term ‚Üí Term
  ‚Ä≥op t ‚Ä≥ = quote op‚Ä≤_ ‚ü® con ‚ü© (t ‚ü®‚à∑‚ü© [])

  open import Categories.Category.Product

  is-√ó  = Œª x ‚Üí x == quote Product
  is-id = Œª x ‚Üí x == quote ‚ä§
  is-op = Œª x ‚Üí x == quote Category.op

  mutual
    ‚Ä≥√ó‚Ä≥-help : List (Arg Term) ‚Üí Term
    ‚Ä≥√ó‚Ä≥-help (x ‚ü®‚à∑‚ü© y ‚ü®‚à∑‚ü© xs) = quote _√ó‚Ä≤_ ‚ü® con ‚ü© buildExpr x ‚ü®‚à∑‚ü© buildExpr y ‚ü®‚à∑‚ü© []
    ‚Ä≥√ó‚Ä≥-help (x ‚à∑ xs) = ‚Ä≥√ó‚Ä≥-help xs
    ‚Ä≥√ó‚Ä≥-help [] = unknown

    ‚Ä≥op‚Ä≥-help : List (Arg Term) ‚Üí Term
    ‚Ä≥op‚Ä≥-help (x ‚ü®‚à∑‚ü© xs) = quote op‚Ä≤_ ‚ü® con ‚ü© buildExpr x ‚ü®‚à∑‚ü© []
    ‚Ä≥op‚Ä≥-help (x ‚à∑ xs) = ‚Ä≥op‚Ä≥-help xs
    ‚Ä≥op‚Ä≥-help [] = unknown

    buildExpr : Term ‚Üí Term
    buildExpr t@(def n xs) =
      if (is-√ó n)
        then ‚Ä≥√ó‚Ä≥-help xs
      else if (is-id n)
        then ‚Ä≥1‚Ä≥
      else if (is-op n)
        then ‚Ä≥op‚Ä≥-help xs
      else
        ‚Ä≥[ t ‚Üë]‚Ä≥
    buildExpr t = ‚Ä≥[ t ‚Üë]‚Ä≥

  --------------------------------------------------------------------------------
  -- Constructing the Solution
  --------------------------------------------------------------------------------

  constructSoln : Term ‚Üí Term ‚Üí Term
  constructSoln lhs rhs =
    quote ‚âÖ.trans ‚ü® def ‚ü©
      (quote ‚âÖ.sym ‚ü® def ‚ü©
        (quote correct ‚ü® def ‚ü© lhs ‚ü®‚à∑‚ü© []) ‚ü®‚à∑‚ü© [])
      ‚ü®‚à∑‚ü© (quote correct ‚ü® def ‚ü© rhs ‚ü®‚à∑‚ü© [])
      ‚ü®‚à∑‚ü© []

  solve-macro : Term ‚Üí TC _
  solve-macro hole = do
    hole‚Ä≤ ‚Üê inferType hole >>= normalise
    just (lhs , rhs) ‚Üê returnTC (getArgs hole‚Ä≤)
      where nothing ‚Üí typeError (termErr hole‚Ä≤ ‚à∑ [])
    let soln = constructSoln (buildExpr lhs) (buildExpr rhs)
    unify hole soln

  macro
    solve : Term ‚Üí TC _
    solve = solve-macro

  base : ‚àÄ {a b c : Category o ‚Ñì e}
       ‚Üí Category.op a √ó ‚ä§ √ó Category.op (Category.op b)
       √ó Category.op a √ó ‚ä§ √ó Category.op (Category.op b)
       √ó Category.op a √ó ‚ä§ √ó Category.op (Category.op b)
       √ó Category.op a √ó ‚ä§ √ó Category.op (Category.op b)
       ‚âÖ Category.op a √ó (‚ä§ √ó b)
       √ó Category.op a √ó (‚ä§ √ó b)
       √ó Category.op a √ó (‚ä§ √ó b)
       √ó Category.op a √ó (‚ä§ √ó b)
  base = solve
